// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"connectrpc.com/connect"
	"context"
	"github.com/mattdowdell/sandbox/internal/adapters/examplerpc"
	"github.com/mattdowdell/sandbox/internal/adapters/healthrpc"
	"github.com/mattdowdell/sandbox/internal/adapters/reflectrpc"
	"github.com/mattdowdell/sandbox/internal/drivers/config"
	"github.com/mattdowdell/sandbox/internal/drivers/config/flagoptions"
	"github.com/mattdowdell/sandbox/internal/drivers/logging"
	"github.com/mattdowdell/sandbox/internal/drivers/otelx"
	"github.com/mattdowdell/sandbox/internal/drivers/rpcserver"
	"github.com/mattdowdell/sandbox/internal/drivers/rpcserver/interceptors/otelconnectx"
	"github.com/mattdowdell/sandbox/internal/drivers/rpcserver/interceptors/validatex"
)

// Injectors from wire.go:

func ProvideApp(ctx context.Context) (*App, error) {
	options := flagoptions.New()
	configConfig := config.New(options)
	mainConfig, err := LoadConfig(configConfig)
	if err != nil {
		return nil, err
	}
	appConfig := mainConfig.App
	loggingConfig := mainConfig.Logging
	logger := logging.NewAsDefaultFromConfig(loggingConfig)
	rpcserverConfig := mainConfig.RPCServer
	handler := examplerpc.New()
	reflectrpcHandler := reflectrpc.New()
	healthrpcHandler := healthrpc.New()
	v := collectHandlers(handler, reflectrpcHandler, healthrpcHandler)
	interceptor, err := validatex.New()
	if err != nil {
		return nil, err
	}
	otelconnectxConfig := mainConfig.OtelConnect
	otelconnectInterceptor, err := otelconnectx.NewFromConfig(otelconnectxConfig)
	if err != nil {
		return nil, err
	}
	v2 := collectInterceptors(interceptor, otelconnectInterceptor)
	v3 := collectHandlerOptions(v2)
	server := rpcserver.NewFromConfig(rpcserverConfig, v, v3)
	tracerProviderConfig := mainConfig.Tracer
	tracerProviderShutdown, err := otelx.NewTracerProvider(ctx, tracerProviderConfig)
	if err != nil {
		return nil, err
	}
	meterProviderConfig := mainConfig.Meter
	meterProviderShutdown, err := otelx.NewMeterProvider(ctx, meterProviderConfig)
	if err != nil {
		return nil, err
	}
	app := NewApp(appConfig, logger, server, tracerProviderShutdown, meterProviderShutdown)
	return app, nil
}

// wire.go:

// collectHandlers merges multiple Handler implementations into a slice.
//
// While wire can cast a struct to an interface, it gets confused if multiple instances of a type
// are present. For more details, see https://github.com/google/wire/issues/207.
func collectHandlers(
	example *examplerpc.Handler,
	reflect *reflectrpc.Handler,
	health *healthrpc.Handler,
) []rpcserver.Handler {
	return []rpcserver.Handler{
		example,
		reflect,
		health,
	}
}

// ...
//
// TODO: document that the ordering here is important
func collectInterceptors(
	validate *validatex.Interceptor,
	otelconnect *otelconnectx.Interceptor,
) []connect.Interceptor {
	return []connect.Interceptor{
		otelconnect,
		validate,
	}
}

// ...
func collectHandlerOptions(
	interceptors []connect.Interceptor,
) []connect.HandlerOption {
	return []connect.HandlerOption{connect.WithInterceptors(interceptors...)}
}
