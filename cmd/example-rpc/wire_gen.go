// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/mattdowdell/sandbox/internal/adapters/datastore"
	"github.com/mattdowdell/sandbox/internal/adapters/examplerpc"
	"github.com/mattdowdell/sandbox/internal/adapters/healthrpc"
	"github.com/mattdowdell/sandbox/internal/adapters/reflectrpc"
	"github.com/mattdowdell/sandbox/internal/drivers/clock"
	"github.com/mattdowdell/sandbox/internal/drivers/config"
	"github.com/mattdowdell/sandbox/internal/drivers/config/flagoptions"
	"github.com/mattdowdell/sandbox/internal/drivers/logging"
	"github.com/mattdowdell/sandbox/internal/drivers/otelx"
	"github.com/mattdowdell/sandbox/internal/drivers/rpcserver"
	"github.com/mattdowdell/sandbox/internal/drivers/rpcserver/interceptors/otelconnectx"
	"github.com/mattdowdell/sandbox/internal/drivers/rpcserver/interceptors/validatex"
	"github.com/mattdowdell/sandbox/internal/drivers/uuidgen"
	"github.com/mattdowdell/sandbox/internal/usecases"
)

// Injectors from wire.go:

func ProvideApp(ctx context.Context) (*App, error) {
	options := flagoptions.New()
	configConfig := config.New(options)
	mainConfig, err := LoadConfig(configConfig)
	if err != nil {
		return nil, err
	}
	appConfig := mainConfig.App
	loggingConfig := mainConfig.Logging
	logger := logging.NewAsDefaultFromConfig(loggingConfig)
	rpcserverConfig := mainConfig.RPCServer
	clockClock := clock.New()
	generator := uuidgen.New()
	stub := datastore.NewStub()
	createResource := usecases.NewCreateResource(clockClock, generator, stub)
	getResource := usecases.NewGetResource(stub)
	listResources := usecases.NewListResources(stub)
	updateResource := usecases.NewUpdateResource(clockClock, stub)
	deleteResource := usecases.NewDeleteResource(stub)
	listAuditEvents := usecases.NewListAuditEvents(stub)
	watchAuditEvents := usecases.NewWatchAuditEvents(stub)
	handler := examplerpc.New(createResource, getResource, listResources, updateResource, deleteResource, listAuditEvents, watchAuditEvents)
	reflectrpcHandler := reflectrpc.New()
	healthrpcHandler := healthrpc.New()
	v := collectHandlers(handler, reflectrpcHandler, healthrpcHandler)
	v2, err := validatex.New()
	if err != nil {
		return nil, err
	}
	otelconnectxConfig := mainConfig.OtelConnect
	v3, err := otelconnectx.NewFromConfig(otelconnectxConfig)
	if err != nil {
		return nil, err
	}
	v4 := collectInterceptors(v2, v3)
	recoverer, err := rpcserver.NewRecoverer()
	if err != nil {
		return nil, err
	}
	v5 := collectHandlerOptions(v4, recoverer)
	server := rpcserver.NewFromConfig(rpcserverConfig, v, v5)
	tracerProviderConfig := mainConfig.Tracer
	tracerProviderShutdown, err := otelx.NewTracerProviderFromConfig(ctx, tracerProviderConfig)
	if err != nil {
		return nil, err
	}
	meterProviderConfig := mainConfig.Meter
	meterProviderShutdown, err := otelx.NewMeterProviderFromConfig(ctx, meterProviderConfig)
	if err != nil {
		return nil, err
	}
	app := NewApp(appConfig, logger, server, tracerProviderShutdown, meterProviderShutdown)
	return app, nil
}
