// Code generated by mockery v2.50.4. DO NOT EDIT.

package mockrepositories

import (
	context "context"

	entities "github.com/mattdowdell/sandbox/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// AuditEvent is an autogenerated mock type for the AuditEvent type
type AuditEvent struct {
	mock.Mock
}

type AuditEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *AuditEvent) EXPECT() *AuditEvent_Expecter {
	return &AuditEvent_Expecter{mock: &_m.Mock}
}

// CreateAuditEvent provides a mock function with given fields: _a0, _a1
func (_m *AuditEvent) CreateAuditEvent(_a0 context.Context, _a1 *entities.AuditEvent) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuditEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.AuditEvent) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuditEvent_CreateAuditEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuditEvent'
type AuditEvent_CreateAuditEvent_Call struct {
	*mock.Call
}

// CreateAuditEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *entities.AuditEvent
func (_e *AuditEvent_Expecter) CreateAuditEvent(_a0 interface{}, _a1 interface{}) *AuditEvent_CreateAuditEvent_Call {
	return &AuditEvent_CreateAuditEvent_Call{Call: _e.mock.On("CreateAuditEvent", _a0, _a1)}
}

func (_c *AuditEvent_CreateAuditEvent_Call) Run(run func(_a0 context.Context, _a1 *entities.AuditEvent)) *AuditEvent_CreateAuditEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.AuditEvent))
	})
	return _c
}

func (_c *AuditEvent_CreateAuditEvent_Call) Return(_a0 error) *AuditEvent_CreateAuditEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditEvent_CreateAuditEvent_Call) RunAndReturn(run func(context.Context, *entities.AuditEvent) error) *AuditEvent_CreateAuditEvent_Call {
	_c.Call.Return(run)
	return _c
}

// ListAuditEvents provides a mock function with given fields: _a0
func (_m *AuditEvent) ListAuditEvents(_a0 context.Context) ([]*entities.AuditEvent, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListAuditEvents")
	}

	var r0 []*entities.AuditEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.AuditEvent, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.AuditEvent); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.AuditEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditEvent_ListAuditEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAuditEvents'
type AuditEvent_ListAuditEvents_Call struct {
	*mock.Call
}

// ListAuditEvents is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *AuditEvent_Expecter) ListAuditEvents(_a0 interface{}) *AuditEvent_ListAuditEvents_Call {
	return &AuditEvent_ListAuditEvents_Call{Call: _e.mock.On("ListAuditEvents", _a0)}
}

func (_c *AuditEvent_ListAuditEvents_Call) Run(run func(_a0 context.Context)) *AuditEvent_ListAuditEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AuditEvent_ListAuditEvents_Call) Return(_a0 []*entities.AuditEvent, _a1 error) *AuditEvent_ListAuditEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuditEvent_ListAuditEvents_Call) RunAndReturn(run func(context.Context) ([]*entities.AuditEvent, error)) *AuditEvent_ListAuditEvents_Call {
	_c.Call.Return(run)
	return _c
}

// WatchAuditEvents provides a mock function with given fields: _a0, _a1
func (_m *AuditEvent) WatchAuditEvents(_a0 context.Context, _a1 chan<- *entities.AuditEvent) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WatchAuditEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *entities.AuditEvent) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuditEvent_WatchAuditEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchAuditEvents'
type AuditEvent_WatchAuditEvents_Call struct {
	*mock.Call
}

// WatchAuditEvents is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 chan<- *entities.AuditEvent
func (_e *AuditEvent_Expecter) WatchAuditEvents(_a0 interface{}, _a1 interface{}) *AuditEvent_WatchAuditEvents_Call {
	return &AuditEvent_WatchAuditEvents_Call{Call: _e.mock.On("WatchAuditEvents", _a0, _a1)}
}

func (_c *AuditEvent_WatchAuditEvents_Call) Run(run func(_a0 context.Context, _a1 chan<- *entities.AuditEvent)) *AuditEvent_WatchAuditEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- *entities.AuditEvent))
	})
	return _c
}

func (_c *AuditEvent_WatchAuditEvents_Call) Return(_a0 error) *AuditEvent_WatchAuditEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditEvent_WatchAuditEvents_Call) RunAndReturn(run func(context.Context, chan<- *entities.AuditEvent) error) *AuditEvent_WatchAuditEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuditEvent creates a new instance of AuditEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditEvent {
	mock := &AuditEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
