// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockrepositories

import (
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UUIDGenerator is an autogenerated mock type for the UUIDGenerator type
type UUIDGenerator struct {
	mock.Mock
}

type UUIDGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *UUIDGenerator) EXPECT() *UUIDGenerator_Expecter {
	return &UUIDGenerator_Expecter{mock: &_m.Mock}
}

// NewV7 provides a mock function with no fields
func (_m *UUIDGenerator) NewV7() (uuid.UUID, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewV7")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func() (uuid.UUID, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UUIDGenerator_NewV7_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewV7'
type UUIDGenerator_NewV7_Call struct {
	*mock.Call
}

// NewV7 is a helper method to define mock.On call
func (_e *UUIDGenerator_Expecter) NewV7() *UUIDGenerator_NewV7_Call {
	return &UUIDGenerator_NewV7_Call{Call: _e.mock.On("NewV7")}
}

func (_c *UUIDGenerator_NewV7_Call) Run(run func()) *UUIDGenerator_NewV7_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UUIDGenerator_NewV7_Call) Return(_a0 uuid.UUID, _a1 error) *UUIDGenerator_NewV7_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UUIDGenerator_NewV7_Call) RunAndReturn(run func() (uuid.UUID, error)) *UUIDGenerator_NewV7_Call {
	_c.Call.Return(run)
	return _c
}

// NewUUIDGenerator creates a new instance of UUIDGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUUIDGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *UUIDGenerator {
	mock := &UUIDGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
