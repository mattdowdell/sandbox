// Code generated by mockery v2.52.1. DO NOT EDIT.

package mockrpcserver

import (
	http "net/http"

	connect "connectrpc.com/connect"

	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

type Handler_Expecter struct {
	mock *mock.Mock
}

func (_m *Handler) EXPECT() *Handler_Expecter {
	return &Handler_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *Handler) Register(_a0 *http.ServeMux, _a1 []connect.HandlerOption) {
	_m.Called(_a0, _a1)
}

// Handler_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Handler_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 *http.ServeMux
//   - _a1 []connect.HandlerOption
func (_e *Handler_Expecter) Register(_a0 interface{}, _a1 interface{}) *Handler_Register_Call {
	return &Handler_Register_Call{Call: _e.mock.On("Register", _a0, _a1)}
}

func (_c *Handler_Register_Call) Run(run func(_a0 *http.ServeMux, _a1 []connect.HandlerOption)) *Handler_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.ServeMux), args[1].([]connect.HandlerOption))
	})
	return _c
}

func (_c *Handler_Register_Call) Return() *Handler_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *Handler_Register_Call) RunAndReturn(run func(*http.ServeMux, []connect.HandlerOption)) *Handler_Register_Call {
	_c.Run(run)
	return _c
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
