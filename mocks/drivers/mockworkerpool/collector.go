// Code generated by mockery. DO NOT EDIT.

package mockworkerpool

import mock "github.com/stretchr/testify/mock"

// Collector is an autogenerated mock type for the Collector type
type Collector[U any] struct {
	mock.Mock
}

type Collector_Expecter[U any] struct {
	mock *mock.Mock
}

func (_m *Collector[U]) EXPECT() *Collector_Expecter[U] {
	return &Collector_Expecter[U]{mock: &_m.Mock}
}

// Collect provides a mock function with given fields: _a0
func (_m *Collector[U]) Collect(_a0 U) {
	_m.Called(_a0)
}

// Collector_Collect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collect'
type Collector_Collect_Call[U any] struct {
	*mock.Call
}

// Collect is a helper method to define mock.On call
//   - _a0 U
func (_e *Collector_Expecter[U]) Collect(_a0 interface{}) *Collector_Collect_Call[U] {
	return &Collector_Collect_Call[U]{Call: _e.mock.On("Collect", _a0)}
}

func (_c *Collector_Collect_Call[U]) Run(run func(_a0 U)) *Collector_Collect_Call[U] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(U))
	})
	return _c
}

func (_c *Collector_Collect_Call[U]) Return() *Collector_Collect_Call[U] {
	_c.Call.Return()
	return _c
}

func (_c *Collector_Collect_Call[U]) RunAndReturn(run func(U)) *Collector_Collect_Call[U] {
	_c.Run(run)
	return _c
}

// NewCollector creates a new instance of Collector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollector[U any](t interface {
	mock.TestingT
	Cleanup(func())
}) *Collector[U] {
	mock := &Collector[U]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
