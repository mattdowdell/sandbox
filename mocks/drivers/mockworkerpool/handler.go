// Code generated by mockery. DO NOT EDIT.

package mockworkerpool

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler[T any, U any] struct {
	mock.Mock
}

type Handler_Expecter[T any, U any] struct {
	mock *mock.Mock
}

func (_m *Handler[T, U]) EXPECT() *Handler_Expecter[T, U] {
	return &Handler_Expecter[T, U]{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: _a0, _a1
func (_m *Handler[T, U]) Handle(_a0 context.Context, _a1 T) U {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 U
	if rf, ok := ret.Get(0).(func(context.Context, T) U); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(U)
		}
	}

	return r0
}

// Handler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Handler_Handle_Call[T any, U any] struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 T
func (_e *Handler_Expecter[T, U]) Handle(_a0 interface{}, _a1 interface{}) *Handler_Handle_Call[T, U] {
	return &Handler_Handle_Call[T, U]{Call: _e.mock.On("Handle", _a0, _a1)}
}

func (_c *Handler_Handle_Call[T, U]) Run(run func(_a0 context.Context, _a1 T)) *Handler_Handle_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *Handler_Handle_Call[T, U]) Return(_a0 U) *Handler_Handle_Call[T, U] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_Handle_Call[T, U]) RunAndReturn(run func(context.Context, T) U) *Handler_Handle_Call[T, U] {
	_c.Call.Return(run)
	return _c
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler[T any, U any](t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler[T, U] {
	mock := &Handler[T, U]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
