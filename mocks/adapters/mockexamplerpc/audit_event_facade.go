// Code generated by mockery. DO NOT EDIT.

package mockexamplerpc

import (
	context "context"

	entities "github.com/mattdowdell/sandbox/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// AuditEventFacade is an autogenerated mock type for the AuditEventFacade type
type AuditEventFacade struct {
	mock.Mock
}

type AuditEventFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *AuditEventFacade) EXPECT() *AuditEventFacade_Expecter {
	return &AuditEventFacade_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: _a0
func (_m *AuditEventFacade) List(_a0 context.Context) ([]*entities.AuditEvent, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entities.AuditEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.AuditEvent, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.AuditEvent); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.AuditEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditEventFacade_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type AuditEventFacade_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *AuditEventFacade_Expecter) List(_a0 interface{}) *AuditEventFacade_List_Call {
	return &AuditEventFacade_List_Call{Call: _e.mock.On("List", _a0)}
}

func (_c *AuditEventFacade_List_Call) Run(run func(_a0 context.Context)) *AuditEventFacade_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AuditEventFacade_List_Call) Return(_a0 []*entities.AuditEvent, _a1 error) *AuditEventFacade_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuditEventFacade_List_Call) RunAndReturn(run func(context.Context) ([]*entities.AuditEvent, error)) *AuditEventFacade_List_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: _a0
func (_m *AuditEventFacade) Watch(_a0 context.Context) <-chan *entities.AuditEvent {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 <-chan *entities.AuditEvent
	if rf, ok := ret.Get(0).(func(context.Context) <-chan *entities.AuditEvent); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *entities.AuditEvent)
		}
	}

	return r0
}

// AuditEventFacade_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type AuditEventFacade_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *AuditEventFacade_Expecter) Watch(_a0 interface{}) *AuditEventFacade_Watch_Call {
	return &AuditEventFacade_Watch_Call{Call: _e.mock.On("Watch", _a0)}
}

func (_c *AuditEventFacade_Watch_Call) Run(run func(_a0 context.Context)) *AuditEventFacade_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AuditEventFacade_Watch_Call) Return(_a0 <-chan *entities.AuditEvent) *AuditEventFacade_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditEventFacade_Watch_Call) RunAndReturn(run func(context.Context) <-chan *entities.AuditEvent) *AuditEventFacade_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuditEventFacade creates a new instance of AuditEventFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditEventFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditEventFacade {
	mock := &AuditEventFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
