// Code generated by mockery v2.52.2. DO NOT EDIT.

package mockexamplerpc

import (
	context "context"

	entities "github.com/mattdowdell/sandbox/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// AuditEventLister is an autogenerated mock type for the AuditEventLister type
type AuditEventLister struct {
	mock.Mock
}

type AuditEventLister_Expecter struct {
	mock *mock.Mock
}

func (_m *AuditEventLister) EXPECT() *AuditEventLister_Expecter {
	return &AuditEventLister_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *AuditEventLister) Execute(_a0 context.Context) ([]*entities.AuditEvent, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []*entities.AuditEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.AuditEvent, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.AuditEvent); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.AuditEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditEventLister_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type AuditEventLister_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *AuditEventLister_Expecter) Execute(_a0 interface{}) *AuditEventLister_Execute_Call {
	return &AuditEventLister_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *AuditEventLister_Execute_Call) Run(run func(_a0 context.Context)) *AuditEventLister_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AuditEventLister_Execute_Call) Return(_a0 []*entities.AuditEvent, _a1 error) *AuditEventLister_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuditEventLister_Execute_Call) RunAndReturn(run func(context.Context) ([]*entities.AuditEvent, error)) *AuditEventLister_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuditEventLister creates a new instance of AuditEventLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditEventLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditEventLister {
	mock := &AuditEventLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
