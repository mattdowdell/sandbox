// Code generated by mockery. DO NOT EDIT.

package mockexamplerpc

import (
	context "context"

	entities "github.com/mattdowdell/sandbox/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ResourceFacade is an autogenerated mock type for the ResourceFacade type
type ResourceFacade struct {
	mock.Mock
}

type ResourceFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceFacade) EXPECT() *ResourceFacade_Expecter {
	return &ResourceFacade_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ResourceFacade) Create(_a0 context.Context, _a1 *entities.Resource) (*entities.Resource, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Resource) (*entities.Resource, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Resource) *entities.Resource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Resource) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceFacade_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ResourceFacade_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *entities.Resource
func (_e *ResourceFacade_Expecter) Create(_a0 interface{}, _a1 interface{}) *ResourceFacade_Create_Call {
	return &ResourceFacade_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *ResourceFacade_Create_Call) Run(run func(_a0 context.Context, _a1 *entities.Resource)) *ResourceFacade_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Resource))
	})
	return _c
}

func (_c *ResourceFacade_Create_Call) Return(_a0 *entities.Resource, _a1 error) *ResourceFacade_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceFacade_Create_Call) RunAndReturn(run func(context.Context, *entities.Resource) (*entities.Resource, error)) *ResourceFacade_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *ResourceFacade) Delete(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceFacade_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ResourceFacade_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *ResourceFacade_Expecter) Delete(_a0 interface{}, _a1 interface{}) *ResourceFacade_Delete_Call {
	return &ResourceFacade_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *ResourceFacade_Delete_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *ResourceFacade_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ResourceFacade_Delete_Call) Return(_a0 error) *ResourceFacade_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourceFacade_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *ResourceFacade_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *ResourceFacade) Get(_a0 context.Context, _a1 uuid.UUID) (*entities.Resource, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entities.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.Resource, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Resource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceFacade_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ResourceFacade_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *ResourceFacade_Expecter) Get(_a0 interface{}, _a1 interface{}) *ResourceFacade_Get_Call {
	return &ResourceFacade_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *ResourceFacade_Get_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *ResourceFacade_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ResourceFacade_Get_Call) Return(_a0 *entities.Resource, _a1 error) *ResourceFacade_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceFacade_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entities.Resource, error)) *ResourceFacade_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0
func (_m *ResourceFacade) List(_a0 context.Context) ([]*entities.Resource, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entities.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.Resource, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Resource); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceFacade_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ResourceFacade_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *ResourceFacade_Expecter) List(_a0 interface{}) *ResourceFacade_List_Call {
	return &ResourceFacade_List_Call{Call: _e.mock.On("List", _a0)}
}

func (_c *ResourceFacade_List_Call) Run(run func(_a0 context.Context)) *ResourceFacade_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ResourceFacade_List_Call) Return(_a0 []*entities.Resource, _a1 error) *ResourceFacade_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceFacade_List_Call) RunAndReturn(run func(context.Context) ([]*entities.Resource, error)) *ResourceFacade_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *ResourceFacade) Update(_a0 context.Context, _a1 *entities.Resource) (*entities.Resource, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entities.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Resource) (*entities.Resource, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Resource) *entities.Resource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Resource) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceFacade_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ResourceFacade_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *entities.Resource
func (_e *ResourceFacade_Expecter) Update(_a0 interface{}, _a1 interface{}) *ResourceFacade_Update_Call {
	return &ResourceFacade_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *ResourceFacade_Update_Call) Run(run func(_a0 context.Context, _a1 *entities.Resource)) *ResourceFacade_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Resource))
	})
	return _c
}

func (_c *ResourceFacade_Update_Call) Return(_a0 *entities.Resource, _a1 error) *ResourceFacade_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceFacade_Update_Call) RunAndReturn(run func(context.Context, *entities.Resource) (*entities.Resource, error)) *ResourceFacade_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceFacade creates a new instance of ResourceFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceFacade {
	mock := &ResourceFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
