// Code generated by mockery. DO NOT EDIT.

package mockcommon

import (
	context "context"

	entities "github.com/mattdowdell/sandbox/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Datastore is an autogenerated mock type for the Datastore type
type Datastore struct {
	mock.Mock
}

type Datastore_Expecter struct {
	mock *mock.Mock
}

func (_m *Datastore) EXPECT() *Datastore_Expecter {
	return &Datastore_Expecter{mock: &_m.Mock}
}

// CreateAuditEvent provides a mock function with given fields: _a0, _a1
func (_m *Datastore) CreateAuditEvent(_a0 context.Context, _a1 *entities.AuditEvent) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuditEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.AuditEvent) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Datastore_CreateAuditEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuditEvent'
type Datastore_CreateAuditEvent_Call struct {
	*mock.Call
}

// CreateAuditEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *entities.AuditEvent
func (_e *Datastore_Expecter) CreateAuditEvent(_a0 interface{}, _a1 interface{}) *Datastore_CreateAuditEvent_Call {
	return &Datastore_CreateAuditEvent_Call{Call: _e.mock.On("CreateAuditEvent", _a0, _a1)}
}

func (_c *Datastore_CreateAuditEvent_Call) Run(run func(_a0 context.Context, _a1 *entities.AuditEvent)) *Datastore_CreateAuditEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.AuditEvent))
	})
	return _c
}

func (_c *Datastore_CreateAuditEvent_Call) Return(_a0 error) *Datastore_CreateAuditEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datastore_CreateAuditEvent_Call) RunAndReturn(run func(context.Context, *entities.AuditEvent) error) *Datastore_CreateAuditEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateResource provides a mock function with given fields: _a0, _a1
func (_m *Datastore) CreateResource(_a0 context.Context, _a1 *entities.Resource) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Resource) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Datastore_CreateResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResource'
type Datastore_CreateResource_Call struct {
	*mock.Call
}

// CreateResource is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *entities.Resource
func (_e *Datastore_Expecter) CreateResource(_a0 interface{}, _a1 interface{}) *Datastore_CreateResource_Call {
	return &Datastore_CreateResource_Call{Call: _e.mock.On("CreateResource", _a0, _a1)}
}

func (_c *Datastore_CreateResource_Call) Run(run func(_a0 context.Context, _a1 *entities.Resource)) *Datastore_CreateResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Resource))
	})
	return _c
}

func (_c *Datastore_CreateResource_Call) Return(_a0 error) *Datastore_CreateResource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datastore_CreateResource_Call) RunAndReturn(run func(context.Context, *entities.Resource) error) *Datastore_CreateResource_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResource provides a mock function with given fields: _a0, _a1
func (_m *Datastore) DeleteResource(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Datastore_DeleteResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResource'
type Datastore_DeleteResource_Call struct {
	*mock.Call
}

// DeleteResource is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *Datastore_Expecter) DeleteResource(_a0 interface{}, _a1 interface{}) *Datastore_DeleteResource_Call {
	return &Datastore_DeleteResource_Call{Call: _e.mock.On("DeleteResource", _a0, _a1)}
}

func (_c *Datastore_DeleteResource_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *Datastore_DeleteResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Datastore_DeleteResource_Call) Return(_a0 error) *Datastore_DeleteResource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datastore_DeleteResource_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Datastore_DeleteResource_Call {
	_c.Call.Return(run)
	return _c
}

// GetResource provides a mock function with given fields: _a0, _a1
func (_m *Datastore) GetResource(_a0 context.Context, _a1 uuid.UUID) (*entities.Resource, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetResource")
	}

	var r0 *entities.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.Resource, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Resource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Datastore_GetResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResource'
type Datastore_GetResource_Call struct {
	*mock.Call
}

// GetResource is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *Datastore_Expecter) GetResource(_a0 interface{}, _a1 interface{}) *Datastore_GetResource_Call {
	return &Datastore_GetResource_Call{Call: _e.mock.On("GetResource", _a0, _a1)}
}

func (_c *Datastore_GetResource_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *Datastore_GetResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Datastore_GetResource_Call) Return(_a0 *entities.Resource, _a1 error) *Datastore_GetResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Datastore_GetResource_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entities.Resource, error)) *Datastore_GetResource_Call {
	_c.Call.Return(run)
	return _c
}

// ListAuditEvents provides a mock function with given fields: _a0
func (_m *Datastore) ListAuditEvents(_a0 context.Context) ([]*entities.AuditEvent, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListAuditEvents")
	}

	var r0 []*entities.AuditEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.AuditEvent, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.AuditEvent); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.AuditEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Datastore_ListAuditEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAuditEvents'
type Datastore_ListAuditEvents_Call struct {
	*mock.Call
}

// ListAuditEvents is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Datastore_Expecter) ListAuditEvents(_a0 interface{}) *Datastore_ListAuditEvents_Call {
	return &Datastore_ListAuditEvents_Call{Call: _e.mock.On("ListAuditEvents", _a0)}
}

func (_c *Datastore_ListAuditEvents_Call) Run(run func(_a0 context.Context)) *Datastore_ListAuditEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Datastore_ListAuditEvents_Call) Return(_a0 []*entities.AuditEvent, _a1 error) *Datastore_ListAuditEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Datastore_ListAuditEvents_Call) RunAndReturn(run func(context.Context) ([]*entities.AuditEvent, error)) *Datastore_ListAuditEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListResources provides a mock function with given fields: _a0
func (_m *Datastore) ListResources(_a0 context.Context) ([]*entities.Resource, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListResources")
	}

	var r0 []*entities.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.Resource, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Resource); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Datastore_ListResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListResources'
type Datastore_ListResources_Call struct {
	*mock.Call
}

// ListResources is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Datastore_Expecter) ListResources(_a0 interface{}) *Datastore_ListResources_Call {
	return &Datastore_ListResources_Call{Call: _e.mock.On("ListResources", _a0)}
}

func (_c *Datastore_ListResources_Call) Run(run func(_a0 context.Context)) *Datastore_ListResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Datastore_ListResources_Call) Return(_a0 []*entities.Resource, _a1 error) *Datastore_ListResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Datastore_ListResources_Call) RunAndReturn(run func(context.Context) ([]*entities.Resource, error)) *Datastore_ListResources_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateResource provides a mock function with given fields: _a0, _a1
func (_m *Datastore) UpdateResource(_a0 context.Context, _a1 *entities.Resource) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Resource) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Datastore_UpdateResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateResource'
type Datastore_UpdateResource_Call struct {
	*mock.Call
}

// UpdateResource is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *entities.Resource
func (_e *Datastore_Expecter) UpdateResource(_a0 interface{}, _a1 interface{}) *Datastore_UpdateResource_Call {
	return &Datastore_UpdateResource_Call{Call: _e.mock.On("UpdateResource", _a0, _a1)}
}

func (_c *Datastore_UpdateResource_Call) Run(run func(_a0 context.Context, _a1 *entities.Resource)) *Datastore_UpdateResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Resource))
	})
	return _c
}

func (_c *Datastore_UpdateResource_Call) Return(_a0 error) *Datastore_UpdateResource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datastore_UpdateResource_Call) RunAndReturn(run func(context.Context, *entities.Resource) error) *Datastore_UpdateResource_Call {
	_c.Call.Return(run)
	return _c
}

// WatchAuditEvents provides a mock function with given fields: _a0, _a1
func (_m *Datastore) WatchAuditEvents(_a0 context.Context, _a1 chan<- *entities.AuditEvent) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WatchAuditEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *entities.AuditEvent) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Datastore_WatchAuditEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchAuditEvents'
type Datastore_WatchAuditEvents_Call struct {
	*mock.Call
}

// WatchAuditEvents is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 chan<- *entities.AuditEvent
func (_e *Datastore_Expecter) WatchAuditEvents(_a0 interface{}, _a1 interface{}) *Datastore_WatchAuditEvents_Call {
	return &Datastore_WatchAuditEvents_Call{Call: _e.mock.On("WatchAuditEvents", _a0, _a1)}
}

func (_c *Datastore_WatchAuditEvents_Call) Run(run func(_a0 context.Context, _a1 chan<- *entities.AuditEvent)) *Datastore_WatchAuditEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- *entities.AuditEvent))
	})
	return _c
}

func (_c *Datastore_WatchAuditEvents_Call) Return(_a0 error) *Datastore_WatchAuditEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datastore_WatchAuditEvents_Call) RunAndReturn(run func(context.Context, chan<- *entities.AuditEvent) error) *Datastore_WatchAuditEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatastore creates a new instance of Datastore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatastore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Datastore {
	mock := &Datastore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
