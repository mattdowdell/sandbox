// Code generated by mockery. DO NOT EDIT.

package mockcommon

import (
	context "context"

	common "github.com/mattdowdell/sandbox/internal/adapters/common"

	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields: _a0
func (_m *Provider) BeginTx(_a0 context.Context) (common.Datastore, common.CommitFn, common.RollbackFn, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 common.Datastore
	var r1 common.CommitFn
	var r2 common.RollbackFn
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context) (common.Datastore, common.CommitFn, common.RollbackFn, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) common.Datastore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Datastore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) common.CommitFn); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.CommitFn)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) common.RollbackFn); ok {
		r2 = rf(_a0)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(common.RollbackFn)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context) error); ok {
		r3 = rf(_a0)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Provider_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type Provider_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Provider_Expecter) BeginTx(_a0 interface{}) *Provider_BeginTx_Call {
	return &Provider_BeginTx_Call{Call: _e.mock.On("BeginTx", _a0)}
}

func (_c *Provider_BeginTx_Call) Run(run func(_a0 context.Context)) *Provider_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Provider_BeginTx_Call) Return(_a0 common.Datastore, _a1 common.CommitFn, _a2 common.RollbackFn, _a3 error) *Provider_BeginTx_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *Provider_BeginTx_Call) RunAndReturn(run func(context.Context) (common.Datastore, common.CommitFn, common.RollbackFn, error)) *Provider_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Datastore provides a mock function with no fields
func (_m *Provider) Datastore() common.Datastore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Datastore")
	}

	var r0 common.Datastore
	if rf, ok := ret.Get(0).(func() common.Datastore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Datastore)
		}
	}

	return r0
}

// Provider_Datastore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Datastore'
type Provider_Datastore_Call struct {
	*mock.Call
}

// Datastore is a helper method to define mock.On call
func (_e *Provider_Expecter) Datastore() *Provider_Datastore_Call {
	return &Provider_Datastore_Call{Call: _e.mock.On("Datastore")}
}

func (_c *Provider_Datastore_Call) Run(run func()) *Provider_Datastore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Datastore_Call) Return(_a0 common.Datastore) *Provider_Datastore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Datastore_Call) RunAndReturn(run func() common.Datastore) *Provider_Datastore_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
