//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AuditEvents = newAuditEventsTable("public", "audit_events", "")

type auditEventsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	Operation    postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	Summary      postgres.ColumnString
	ResourceID   postgres.ColumnString
	ResourceType postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AuditEventsTable struct {
	auditEventsTable

	EXCLUDED auditEventsTable
}

// AS creates new AuditEventsTable with assigned alias
func (a AuditEventsTable) AS(alias string) *AuditEventsTable {
	return newAuditEventsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuditEventsTable with assigned schema name
func (a AuditEventsTable) FromSchema(schemaName string) *AuditEventsTable {
	return newAuditEventsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuditEventsTable with assigned table prefix
func (a AuditEventsTable) WithPrefix(prefix string) *AuditEventsTable {
	return newAuditEventsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuditEventsTable with assigned table suffix
func (a AuditEventsTable) WithSuffix(suffix string) *AuditEventsTable {
	return newAuditEventsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuditEventsTable(schemaName, tableName, alias string) *AuditEventsTable {
	return &AuditEventsTable{
		auditEventsTable: newAuditEventsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newAuditEventsTableImpl("", "excluded", ""),
	}
}

func newAuditEventsTableImpl(schemaName, tableName, alias string) auditEventsTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		OperationColumn    = postgres.StringColumn("operation")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		SummaryColumn      = postgres.StringColumn("summary")
		ResourceIDColumn   = postgres.StringColumn("resource_id")
		ResourceTypeColumn = postgres.StringColumn("resource_type")
		allColumns         = postgres.ColumnList{IDColumn, OperationColumn, CreatedAtColumn, SummaryColumn, ResourceIDColumn, ResourceTypeColumn}
		mutableColumns     = postgres.ColumnList{OperationColumn, CreatedAtColumn, SummaryColumn, ResourceIDColumn, ResourceTypeColumn}
	)

	return auditEventsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Operation:    OperationColumn,
		CreatedAt:    CreatedAtColumn,
		Summary:      SummaryColumn,
		ResourceID:   ResourceIDColumn,
		ResourceType: ResourceTypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
