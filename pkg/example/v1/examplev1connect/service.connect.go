// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: example/v1/service.proto

package examplev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mattdowdell/sandbox/pkg/example/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExampleServiceName is the fully-qualified name of the ExampleService service.
	ExampleServiceName = "example.v1.ExampleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExampleServiceCreateResourceProcedure is the fully-qualified name of the ExampleService's
	// CreateResource RPC.
	ExampleServiceCreateResourceProcedure = "/example.v1.ExampleService/CreateResource"
	// ExampleServiceGetResourceProcedure is the fully-qualified name of the ExampleService's
	// GetResource RPC.
	ExampleServiceGetResourceProcedure = "/example.v1.ExampleService/GetResource"
	// ExampleServiceListResourcesProcedure is the fully-qualified name of the ExampleService's
	// ListResources RPC.
	ExampleServiceListResourcesProcedure = "/example.v1.ExampleService/ListResources"
	// ExampleServiceUpdateResourceProcedure is the fully-qualified name of the ExampleService's
	// UpdateResource RPC.
	ExampleServiceUpdateResourceProcedure = "/example.v1.ExampleService/UpdateResource"
	// ExampleServiceDeleteResourceProcedure is the fully-qualified name of the ExampleService's
	// DeleteResource RPC.
	ExampleServiceDeleteResourceProcedure = "/example.v1.ExampleService/DeleteResource"
	// ExampleServiceListAuditEventsProcedure is the fully-qualified name of the ExampleService's
	// ListAuditEvents RPC.
	ExampleServiceListAuditEventsProcedure = "/example.v1.ExampleService/ListAuditEvents"
	// ExampleServiceWatchAuditEventsProcedure is the fully-qualified name of the ExampleService's
	// WatchAuditEvents RPC.
	ExampleServiceWatchAuditEventsProcedure = "/example.v1.ExampleService/WatchAuditEvents"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	exampleServiceServiceDescriptor                = v1.File_example_v1_service_proto.Services().ByName("ExampleService")
	exampleServiceCreateResourceMethodDescriptor   = exampleServiceServiceDescriptor.Methods().ByName("CreateResource")
	exampleServiceGetResourceMethodDescriptor      = exampleServiceServiceDescriptor.Methods().ByName("GetResource")
	exampleServiceListResourcesMethodDescriptor    = exampleServiceServiceDescriptor.Methods().ByName("ListResources")
	exampleServiceUpdateResourceMethodDescriptor   = exampleServiceServiceDescriptor.Methods().ByName("UpdateResource")
	exampleServiceDeleteResourceMethodDescriptor   = exampleServiceServiceDescriptor.Methods().ByName("DeleteResource")
	exampleServiceListAuditEventsMethodDescriptor  = exampleServiceServiceDescriptor.Methods().ByName("ListAuditEvents")
	exampleServiceWatchAuditEventsMethodDescriptor = exampleServiceServiceDescriptor.Methods().ByName("WatchAuditEvents")
)

// ExampleServiceClient is a client for the example.v1.ExampleService service.
type ExampleServiceClient interface {
	// ...
	CreateResource(context.Context, *connect.Request[v1.CreateResourceRequest]) (*connect.Response[v1.CreateResourceResponse], error)
	// ...
	GetResource(context.Context, *connect.Request[v1.GetResourceRequest]) (*connect.Response[v1.GetResourceResponse], error)
	// ...
	ListResources(context.Context, *connect.Request[v1.ListResourcesRequest]) (*connect.Response[v1.ListResourcesResponse], error)
	// ...
	UpdateResource(context.Context, *connect.Request[v1.UpdateResourceRequest]) (*connect.Response[v1.UpdateResourceResponse], error)
	// ...
	DeleteResource(context.Context, *connect.Request[v1.DeleteResourceRequest]) (*connect.Response[v1.DeleteResourceResponse], error)
	// ...
	ListAuditEvents(context.Context, *connect.Request[v1.ListAuditEventsRequest]) (*connect.Response[v1.ListAuditEventsResponse], error)
	// ...
	WatchAuditEvents(context.Context, *connect.Request[v1.WatchAuditEventsRequest]) (*connect.ServerStreamForClient[v1.WatchAuditEventsResponse], error)
}

// NewExampleServiceClient constructs a client for the example.v1.ExampleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExampleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExampleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &exampleServiceClient{
		createResource: connect.NewClient[v1.CreateResourceRequest, v1.CreateResourceResponse](
			httpClient,
			baseURL+ExampleServiceCreateResourceProcedure,
			connect.WithSchema(exampleServiceCreateResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getResource: connect.NewClient[v1.GetResourceRequest, v1.GetResourceResponse](
			httpClient,
			baseURL+ExampleServiceGetResourceProcedure,
			connect.WithSchema(exampleServiceGetResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listResources: connect.NewClient[v1.ListResourcesRequest, v1.ListResourcesResponse](
			httpClient,
			baseURL+ExampleServiceListResourcesProcedure,
			connect.WithSchema(exampleServiceListResourcesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateResource: connect.NewClient[v1.UpdateResourceRequest, v1.UpdateResourceResponse](
			httpClient,
			baseURL+ExampleServiceUpdateResourceProcedure,
			connect.WithSchema(exampleServiceUpdateResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteResource: connect.NewClient[v1.DeleteResourceRequest, v1.DeleteResourceResponse](
			httpClient,
			baseURL+ExampleServiceDeleteResourceProcedure,
			connect.WithSchema(exampleServiceDeleteResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAuditEvents: connect.NewClient[v1.ListAuditEventsRequest, v1.ListAuditEventsResponse](
			httpClient,
			baseURL+ExampleServiceListAuditEventsProcedure,
			connect.WithSchema(exampleServiceListAuditEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		watchAuditEvents: connect.NewClient[v1.WatchAuditEventsRequest, v1.WatchAuditEventsResponse](
			httpClient,
			baseURL+ExampleServiceWatchAuditEventsProcedure,
			connect.WithSchema(exampleServiceWatchAuditEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// exampleServiceClient implements ExampleServiceClient.
type exampleServiceClient struct {
	createResource   *connect.Client[v1.CreateResourceRequest, v1.CreateResourceResponse]
	getResource      *connect.Client[v1.GetResourceRequest, v1.GetResourceResponse]
	listResources    *connect.Client[v1.ListResourcesRequest, v1.ListResourcesResponse]
	updateResource   *connect.Client[v1.UpdateResourceRequest, v1.UpdateResourceResponse]
	deleteResource   *connect.Client[v1.DeleteResourceRequest, v1.DeleteResourceResponse]
	listAuditEvents  *connect.Client[v1.ListAuditEventsRequest, v1.ListAuditEventsResponse]
	watchAuditEvents *connect.Client[v1.WatchAuditEventsRequest, v1.WatchAuditEventsResponse]
}

// CreateResource calls example.v1.ExampleService.CreateResource.
func (c *exampleServiceClient) CreateResource(ctx context.Context, req *connect.Request[v1.CreateResourceRequest]) (*connect.Response[v1.CreateResourceResponse], error) {
	return c.createResource.CallUnary(ctx, req)
}

// GetResource calls example.v1.ExampleService.GetResource.
func (c *exampleServiceClient) GetResource(ctx context.Context, req *connect.Request[v1.GetResourceRequest]) (*connect.Response[v1.GetResourceResponse], error) {
	return c.getResource.CallUnary(ctx, req)
}

// ListResources calls example.v1.ExampleService.ListResources.
func (c *exampleServiceClient) ListResources(ctx context.Context, req *connect.Request[v1.ListResourcesRequest]) (*connect.Response[v1.ListResourcesResponse], error) {
	return c.listResources.CallUnary(ctx, req)
}

// UpdateResource calls example.v1.ExampleService.UpdateResource.
func (c *exampleServiceClient) UpdateResource(ctx context.Context, req *connect.Request[v1.UpdateResourceRequest]) (*connect.Response[v1.UpdateResourceResponse], error) {
	return c.updateResource.CallUnary(ctx, req)
}

// DeleteResource calls example.v1.ExampleService.DeleteResource.
func (c *exampleServiceClient) DeleteResource(ctx context.Context, req *connect.Request[v1.DeleteResourceRequest]) (*connect.Response[v1.DeleteResourceResponse], error) {
	return c.deleteResource.CallUnary(ctx, req)
}

// ListAuditEvents calls example.v1.ExampleService.ListAuditEvents.
func (c *exampleServiceClient) ListAuditEvents(ctx context.Context, req *connect.Request[v1.ListAuditEventsRequest]) (*connect.Response[v1.ListAuditEventsResponse], error) {
	return c.listAuditEvents.CallUnary(ctx, req)
}

// WatchAuditEvents calls example.v1.ExampleService.WatchAuditEvents.
func (c *exampleServiceClient) WatchAuditEvents(ctx context.Context, req *connect.Request[v1.WatchAuditEventsRequest]) (*connect.ServerStreamForClient[v1.WatchAuditEventsResponse], error) {
	return c.watchAuditEvents.CallServerStream(ctx, req)
}

// ExampleServiceHandler is an implementation of the example.v1.ExampleService service.
type ExampleServiceHandler interface {
	// ...
	CreateResource(context.Context, *connect.Request[v1.CreateResourceRequest]) (*connect.Response[v1.CreateResourceResponse], error)
	// ...
	GetResource(context.Context, *connect.Request[v1.GetResourceRequest]) (*connect.Response[v1.GetResourceResponse], error)
	// ...
	ListResources(context.Context, *connect.Request[v1.ListResourcesRequest]) (*connect.Response[v1.ListResourcesResponse], error)
	// ...
	UpdateResource(context.Context, *connect.Request[v1.UpdateResourceRequest]) (*connect.Response[v1.UpdateResourceResponse], error)
	// ...
	DeleteResource(context.Context, *connect.Request[v1.DeleteResourceRequest]) (*connect.Response[v1.DeleteResourceResponse], error)
	// ...
	ListAuditEvents(context.Context, *connect.Request[v1.ListAuditEventsRequest]) (*connect.Response[v1.ListAuditEventsResponse], error)
	// ...
	WatchAuditEvents(context.Context, *connect.Request[v1.WatchAuditEventsRequest], *connect.ServerStream[v1.WatchAuditEventsResponse]) error
}

// NewExampleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExampleServiceHandler(svc ExampleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	exampleServiceCreateResourceHandler := connect.NewUnaryHandler(
		ExampleServiceCreateResourceProcedure,
		svc.CreateResource,
		connect.WithSchema(exampleServiceCreateResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceGetResourceHandler := connect.NewUnaryHandler(
		ExampleServiceGetResourceProcedure,
		svc.GetResource,
		connect.WithSchema(exampleServiceGetResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceListResourcesHandler := connect.NewUnaryHandler(
		ExampleServiceListResourcesProcedure,
		svc.ListResources,
		connect.WithSchema(exampleServiceListResourcesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceUpdateResourceHandler := connect.NewUnaryHandler(
		ExampleServiceUpdateResourceProcedure,
		svc.UpdateResource,
		connect.WithSchema(exampleServiceUpdateResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceDeleteResourceHandler := connect.NewUnaryHandler(
		ExampleServiceDeleteResourceProcedure,
		svc.DeleteResource,
		connect.WithSchema(exampleServiceDeleteResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceListAuditEventsHandler := connect.NewUnaryHandler(
		ExampleServiceListAuditEventsProcedure,
		svc.ListAuditEvents,
		connect.WithSchema(exampleServiceListAuditEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceWatchAuditEventsHandler := connect.NewServerStreamHandler(
		ExampleServiceWatchAuditEventsProcedure,
		svc.WatchAuditEvents,
		connect.WithSchema(exampleServiceWatchAuditEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/example.v1.ExampleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExampleServiceCreateResourceProcedure:
			exampleServiceCreateResourceHandler.ServeHTTP(w, r)
		case ExampleServiceGetResourceProcedure:
			exampleServiceGetResourceHandler.ServeHTTP(w, r)
		case ExampleServiceListResourcesProcedure:
			exampleServiceListResourcesHandler.ServeHTTP(w, r)
		case ExampleServiceUpdateResourceProcedure:
			exampleServiceUpdateResourceHandler.ServeHTTP(w, r)
		case ExampleServiceDeleteResourceProcedure:
			exampleServiceDeleteResourceHandler.ServeHTTP(w, r)
		case ExampleServiceListAuditEventsProcedure:
			exampleServiceListAuditEventsHandler.ServeHTTP(w, r)
		case ExampleServiceWatchAuditEventsProcedure:
			exampleServiceWatchAuditEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExampleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExampleServiceHandler struct{}

func (UnimplementedExampleServiceHandler) CreateResource(context.Context, *connect.Request[v1.CreateResourceRequest]) (*connect.Response[v1.CreateResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.ExampleService.CreateResource is not implemented"))
}

func (UnimplementedExampleServiceHandler) GetResource(context.Context, *connect.Request[v1.GetResourceRequest]) (*connect.Response[v1.GetResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.ExampleService.GetResource is not implemented"))
}

func (UnimplementedExampleServiceHandler) ListResources(context.Context, *connect.Request[v1.ListResourcesRequest]) (*connect.Response[v1.ListResourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.ExampleService.ListResources is not implemented"))
}

func (UnimplementedExampleServiceHandler) UpdateResource(context.Context, *connect.Request[v1.UpdateResourceRequest]) (*connect.Response[v1.UpdateResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.ExampleService.UpdateResource is not implemented"))
}

func (UnimplementedExampleServiceHandler) DeleteResource(context.Context, *connect.Request[v1.DeleteResourceRequest]) (*connect.Response[v1.DeleteResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.ExampleService.DeleteResource is not implemented"))
}

func (UnimplementedExampleServiceHandler) ListAuditEvents(context.Context, *connect.Request[v1.ListAuditEventsRequest]) (*connect.Response[v1.ListAuditEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.ExampleService.ListAuditEvents is not implemented"))
}

func (UnimplementedExampleServiceHandler) WatchAuditEvents(context.Context, *connect.Request[v1.WatchAuditEventsRequest], *connect.ServerStream[v1.WatchAuditEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.ExampleService.WatchAuditEvents is not implemented"))
}
