# TODO: move to separate repository

name: 'Go Install'
description: 'Installs and caches Go binaries using "go install".'

inputs:
  name:
    description: 'The name of the Go binary to install.'
    required: true
  package:
    description: 'The Go package to install'
    required: true
  version:
    description: 'The Go package version to install.'
    required: false
    default: 'latest'

outputs:
  version:
    description: 'The installed version.'
    value: ${{ steps.version.outputs.version }}
  cached:
    description: 'Whether the binary was cached.'
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Version
      id: version
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          const version = core.getInput('version');
          if (version != 'latest') {
            core.setOutput('version', version);
          }

          const package = core.getInput('package');

          let module = package;
          let versions = [];

          while (true) {
            let output = '';

            const options = {
              ignoreReturnCode: true,
              listeners: {
                stdout: (data) => {
                  output += data.toString();
                },
              },
            };

            const code = await exec.exec(
              'go'
              ['list', '-m', '-versions', '-mod=readonly', '-json',  module],
              options
            );

            if (code == 0) {
              const data = JSON.parse(json);
              core.setOutput('version', data.Versions[-1]);
              return;
            }

            if (module.lastIndexOf('/') == -1) {
              core.setFailed('failed to identify go module');
              return;
            }

            module = module.split('/').slice(0, -1).join('/');
          }

    - name: Cache
      uses: actions/cache@v4
      id: cache
      with:
        path: ~/go/bin/${{ inputs.name }}
        key: go-install-${{ runner.os }}-${{ runner.arch }}-${{ inputs.name }}-${{ steps.version.outputs.version }}-${{ hashFiles('~/go/bin/${{ inputs.name }}') }}
        restore-keys: go-install-${{ runner.os }}-${{ runner.arch }}-${{ inputs.name }}-${{ steps.version.outputs.version }}-

    - name: Install
      if: steps.cache.outputs.cache-hit != 'true'
      run: go install ${{ inputs.package }}@${{ steps.version.outputs.version }}
      shell: bash
