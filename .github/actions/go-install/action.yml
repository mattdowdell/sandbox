# TODO: move to separate repository

name: 'Go Install'
description: 'Installs and caches Go binaries using "go install".'

inputs:
  module:
    description: 'The Go module. Only required when version is "latest" and "main.go" is not in the root of the module.'
    required: false
  name:
    description: 'The name of the installed Go binary.'
    required: true
  package:
    description: 'The Go package to install'
    required: true
  version:
    description: 'The Go package version to install.'
    required: false
    default: 'latest'

outputs:
  version:
    description: 'The installed version.'
    value: ${{ steps.version.outputs.version }}
  cached:
    description: 'Whether the binary was cached.'
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Version
      id: version
      run: |
        if [ "${{ inputs.version }}" = "latest" ]; then
          if [ -n "${{ inputs.module }}" ]
            version=$(go list -m -versions -mod=readonly -json ${{ inputs.module }} | jq -r '.Versions[-1]')
          else
            version=$(go list -m -versions -mod=readonly -json ${{ inputs.package }} | jq -r '.Versions[-1]')
          fi
        else
          version=${{ inputs.version }}
        fi

        echo "version=$version" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache
      uses: actions/cache@v4
      id: cache
      with:
        path: ~/go/bin/${{ inputs.name }}
        key: go-install-${{ runner.os }}-${{ runner.arch }}-${{ inputs.name }}-${{ steps.version.outputs.version }}-${{ hashFiles('~/go/bin/${{ inputs.name }}') }}
        restore-keys: go-install-${{ runner.os }}-${{ runner.arch }}-${{ inputs.name }}-${{ steps.version.outputs.version }}-

    - name: Install
      if: steps.cache.outputs.cache-hit != 'true'
      run: go install ${{ inputs.package }}@${{ steps.version.outputs.version }}
      shell: bash
